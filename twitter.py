# -*- coding: utf-8 -*-
"""twitter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kim7Rso-MjConx02SJYb9diJeupyv_tq
"""

import pandas as pd

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import nltk 
from nltk.tokenize import sent_tokenize
from nltk.corpus import words
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from nltk.stem import PorterStemmer
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from nltk.sentiment.util import *
from collections import Counter
from sklearn.feature_extraction.text import CountVectorizer

df= pd.read_csv('covid19_tweets.csv')

df

df.describe()

df.info()

df.text.head()

import re
import string

def clean_text(text):
    '''Make text lowercase, remove text in square brackets,remove links,remove punctuation
    and remove words containing numbers.'''
    text = text.lower()
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)
    return text


def text_preprocessing(text):
    tokenizer = nltk.tokenize.RegexpTokenizer(r'\w+')
    nopunc = clean_text(text)
    tokenized_text = tokenizer.tokenize(nopunc)
    combined_text = ' '.join(tokenized_text)
    return combined_text

df['text_clean'] = df['text'].apply(str).apply(lambda x: text_preprocessing(x))

df['text_clean'].head

sns.barplot(df["user_location"].value_counts().values[0:20],
            df["user_location"].value_counts().index[0:20]);
plt.title("Top 20 Location")
plt.xlabel("No. of tweets")
plt.ylabel("Location")
plt.show()

ds = df['user_name'].value_counts().reset_index()
ds.columns = ['user_name', 'tweets_count']
ds = ds.sort_values(['tweets_count'])
 
sns.barplot(x = 'tweets_count',y = 'user_name',data = ds.tail(10))

plt.show()

ds = df['source'].value_counts().reset_index()
ds.columns = ['source', 'count']
ds = ds.sort_values(['count'])
sns.barplot(x= 'count', y='source', data= ds.tail(10))



nltk.download('vader_lexicon')
sid = SentimentIntensityAnalyzer()
sentiment_scores = df['text_clean'].apply(lambda x: sid.polarity_scores(x))
sent_scores_df = pd.DataFrame(list(sentiment_scores))
sent_scores_df.tail

sent_scores_df['val'] = sent_scores_df['compound'].apply(lambda x: 'neutral' if x == 0 else ('positive' if x > 0 else 'negative'))
sent_scores_df.head()

sent_counts = pd.DataFrame.from_dict(Counter(sent_scores_df['val']), orient = 'index').reset_index()
sent_counts.columns = ['sentiment', 'count']
sns.barplot(y="count", x='sentiment', data=sent_counts)
plt.show()

def get_top_n_gram(corpus,ngram_range,n=None):
    vec = CountVectorizer(ngram_range=ngram_range,stop_words = 'english').fit(corpus)
    bag_of_words = vec.transform(corpus)
    sum_words = bag_of_words.sum(axis=0) 
    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]
    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)
    return words_freq[:n]

unigrams = get_top_n_gram(df['text_clean'],(1,1),10)
unigram_df = pd.DataFrame(unigrams, columns = ['Text' , 'count'])

sns.barplot(unigram_df["count"],unigram_df["Text"])
plt.title("Top 10 Unigrams")
plt.xlabel("Counts")
plt.ylabel("Text")
plt.show()

bigrams = get_top_n_gram(df['text_clean'],(2,2),10)
bigram_df = pd.DataFrame(bigrams, columns = ['Text' , 'count'])
plt.figure(figsize=(9,10))
sns.barplot(bigram_df["count"],bigram_df["Text"])
plt.title("Top 10 Bigrams")
plt.xlabel("Counts")
plt.ylabel("Text")
plt.show()

trigrams = get_top_n_gram(df['text_clean'],(3,3),10)
trigram_df = pd.DataFrame(trigrams, columns = ['Text' , 'count'])
sns.barplot(trigram_df["count"],trigram_df["Text"])
plt.title("Top 10 Trigrams")
plt.xlabel("Counts")
plt.ylabel("Text")
plt.show()

plt.figure(figsize=(9,9))
sns.heatmap(df.drop(["is_retweet","user_verified"], axis = 1).corr(), annot=True)
plt.show()

plt.figure(figsize=(20,20))

ds = df['hashtags'].value_counts().reset_index()
ds.columns = ['hashtags', 'tweets_count']
ds = ds.sort_values(['tweets_count'])
 
sns.barplot(x = 'tweets_count',y = 'hashtags',data = ds.tail(40))

plt.show()





